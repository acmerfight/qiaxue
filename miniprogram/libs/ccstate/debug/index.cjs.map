{"version":3,"file":"index.cjs","sources":["../../src/core/interceptor.ts","../../src/core/typing-util.ts","../../src/core/signal/signal.ts","../../src/core/signal/computed.ts","../../src/core/store/set.ts","../../src/core/signal/state.ts","../../src/core/store/sub.ts","../../src/core/signal/factory.ts","../../src/core/store/store.ts","../../src/debug/debug-store.ts","../../src/debug/console-inspector.ts"],"sourcesContent":["import type { Command, Computed, Signal, State } from '../../types/core/signal';\nimport type {\n  ComputedState,\n  InterceptorComputed,\n  InterceptorGet,\n  InterceptorSet,\n  SetArgs,\n} from '../../types/core/store';\n\ntype DataWithCalledState<T> =\n  | {\n      called: false;\n    }\n  | {\n      called: true;\n      data: T;\n    };\n\nexport function withSetInterceptor<T, Args extends SetArgs<T, unknown[]>>(\n  fn: () => T | undefined,\n  writable$: State<T> | Command<T, Args>,\n  interceptor: InterceptorSet | undefined,\n  ...args: Args\n): T | undefined {\n  if (!interceptor) {\n    return fn();\n  }\n\n  let result = { called: false } as DataWithCalledState<T | undefined>;\n  const wrappedFn = () => {\n    result = { called: true, data: fn() };\n    return result.data;\n  };\n  if ('write' in writable$) {\n    interceptor(writable$, wrappedFn, ...args);\n  } else {\n    interceptor(writable$, wrappedFn, args[0]);\n  }\n\n  if (!result.called) {\n    throw new Error('interceptor must call fn sync');\n  }\n\n  return result.data;\n}\n\nexport function withGetInterceptor<T>(fn: () => T, signal: Signal<T>, interceptor?: InterceptorGet): T {\n  if (!interceptor) {\n    return fn();\n  }\n\n  let result = { called: false } as DataWithCalledState<T>;\n\n  interceptor(signal, () => {\n    result = { called: true, data: fn() };\n    return result.data;\n  });\n\n  if (!result.called) {\n    throw new Error('interceptor must call fn sync');\n  }\n\n  return result.data;\n}\n\nexport function withComputedInterceptor<T>(\n  fn: () => ComputedState<T>,\n  signal: Computed<T>,\n  interceptor?: InterceptorComputed,\n): ComputedState<T> {\n  if (!interceptor) {\n    return fn();\n  }\n\n  let result = { called: false } as DataWithCalledState<ComputedState<T>>;\n\n  interceptor(signal, () => {\n    result = { called: true, data: fn() };\n    return result.data.val;\n  });\n\n  if (!result.called) {\n    throw new Error('interceptor must call fn sync');\n  }\n\n  return result.data;\n}\n\nexport function withGeValInterceptor<T>(fn: () => T, signal: Signal<T>, interceptor?: InterceptorGet): T {\n  if (!interceptor) {\n    return fn();\n  }\n\n  let result = { called: false } as DataWithCalledState<T>;\n\n  interceptor(signal, () => {\n    result = { called: true, data: fn() };\n    return result.data;\n  });\n\n  if (!result.called) {\n    throw new Error('interceptor must call fn sync');\n  }\n\n  return result.data;\n}\n","import type { Computed, Signal } from '../../types/core/signal';\nimport type { ComputedState, SignalState } from '../../types/core/store';\n\nexport function canReadAsCompute<T>(atom: Signal<T>): atom is Computed<T> {\n  return 'read' in atom;\n}\n\nexport function isComputedState<T>(state: SignalState<T>): state is ComputedState<T> {\n  return 'dependencies' in state;\n}\n","import type { Computed, Signal } from '../../../types/core/signal';\nimport type { ComputedState, StoreContext } from '../../../types/core/store';\n\nexport function currentValue<T>(signal: Signal<T>, context: StoreContext): T | undefined {\n  return context.stateMap.get(signal)?.val as T | undefined;\n}\n\nexport function shouldDistinct<T>(signal: Signal<T>, value: T, context: StoreContext) {\n  return currentValue(signal, context) === value;\n}\n\nexport function shouldDistinctError(signal: Computed<unknown>, context: StoreContext) {\n  return (context.stateMap.get(signal) as ComputedState<unknown> | undefined)?.error !== undefined;\n}\n","import type { Computed, Getter, Signal } from '../../../types/core/signal';\nimport type {\n  ComputedState,\n  Mount,\n  Mutation,\n  ReadComputed,\n  ReadSignal,\n  StoreContext,\n  Unmount,\n} from '../../../types/core/store';\nimport { withGeValInterceptor } from '../interceptor';\nimport { canReadAsCompute } from '../typing-util';\nimport { shouldDistinct, shouldDistinctError } from './signal';\n\nfunction checkEpoch<T>(\n  readComputed: ReadComputed,\n  computedState: ComputedState<T>,\n  context: StoreContext,\n  mutation?: Mutation,\n): boolean {\n  for (const [dep, epoch] of computedState.dependencies.entries()) {\n    const depEpoch = canReadAsCompute(dep)\n      ? readComputed(dep, context, mutation).epoch\n      : context.stateMap.get(dep)?.epoch;\n\n    if (depEpoch !== epoch) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function tryGetCached<T>(\n  readComputed: ReadComputed,\n  computed$: Computed<T>,\n  context: StoreContext,\n  mutation?: Mutation,\n): ComputedState<T> | undefined {\n  const signalState = context.stateMap.get(computed$) as ComputedState<T> | undefined;\n  if (!signalState) {\n    return undefined;\n  }\n\n  // If a computed is marked as potentially dirty, we should perform a\n  // thorough epoch check. Alternatively, we can check the mounted state since\n  // a mounted computed is always re-evaluated immediately.\n  const mayDirty = mutation?.potentialDirtyIds.has(computed$.id);\n  if (!mayDirty && signalState.mounted) {\n    return signalState;\n  }\n\n  if (checkEpoch(readComputed, signalState, context, mutation)) {\n    if (mayDirty) {\n      mutation?.potentialDirtyIds.delete(computed$.id);\n    }\n    return signalState;\n  }\n\n  return undefined;\n}\n\nfunction wrapGet<T>(\n  readSignal: ReadSignal,\n  mount: Mount,\n  callerComputed$: Computed<T>,\n  callerState: ComputedState<T>,\n  context: StoreContext,\n  mutation?: Mutation,\n): [Getter, Map<Signal<unknown>, number>] {\n  const readDeps = new Map<Signal<unknown>, number>();\n\n  return [\n    (dep$) => {\n      const depState = readSignal(dep$, context, mutation);\n\n      if (callerState.dependencies === readDeps) {\n        readDeps.set(dep$, depState.epoch);\n\n        const callerMounted = !!callerState.mounted;\n        if (callerMounted && !depState.mounted) {\n          mount(dep$, context, mutation).readDepts.add(callerComputed$);\n        } else if (callerMounted && depState.mounted) {\n          depState.mounted.readDepts.add(callerComputed$);\n        }\n      }\n\n      if ('error' in depState) {\n        throw depState.error;\n      }\n\n      return depState.val;\n    },\n    readDeps,\n  ];\n}\n\nfunction getOrInitComputedState<T>(computed$: Computed<T>, context: StoreContext): ComputedState<T> {\n  let computedState: ComputedState<T> | undefined = context.stateMap.get(computed$) as ComputedState<T> | undefined;\n  if (!computedState) {\n    computedState = {\n      dependencies: new Map<Signal<unknown>, number>(),\n      epoch: -1,\n    } as ComputedState<T>;\n    context.stateMap.set(computed$, computedState);\n  }\n\n  return computedState;\n}\n\nfunction cleanupMissingDependencies<T>(\n  unmount: Unmount,\n  computed$: Computed<T>,\n  lastDeps: Map<Signal<unknown>, number>,\n  currDeps: Map<Signal<unknown>, number>,\n  context: StoreContext,\n  mutation?: Mutation,\n) {\n  for (const key of lastDeps.keys()) {\n    if (!currDeps.has(key)) {\n      const depState = context.stateMap.get(key);\n      depState?.mounted?.readDepts.delete(computed$);\n      unmount(key, context, mutation);\n    }\n  }\n}\n\ntype ComputedResult<T> =\n  | {\n      value: T;\n    }\n  | {\n      error: unknown;\n    };\n\nexport function evaluateComputed<T>(\n  readSignal: ReadSignal,\n  mount: Mount,\n  unmount: Unmount,\n  computed$: Computed<T>,\n  context: StoreContext,\n  mutation?: Mutation,\n): ComputedState<T> {\n  const computedState = getOrInitComputedState(computed$, context);\n\n  const lastDeps = computedState.dependencies;\n\n  const [_get, dependencies] = wrapGet(readSignal, mount, computed$, computedState, context, mutation);\n  computedState.dependencies = dependencies;\n\n  let result: ComputedResult<T>;\n  try {\n    result = {\n      value: computed$.read(\n        function <U>(depAtom: Signal<U>) {\n          return withGeValInterceptor(() => _get(depAtom), depAtom, context.interceptor?.get);\n        },\n        {\n          get signal() {\n            computedState.abortController?.abort(`abort ${computed$.debugLabel ?? 'anonymous'} atom`);\n            computedState.abortController = new AbortController();\n            return computedState.abortController.signal;\n          },\n        },\n      ),\n    };\n  } catch (error) {\n    result = {\n      error,\n    };\n  }\n\n  mutation?.potentialDirtyIds.delete(computed$.id);\n\n  cleanupMissingDependencies(unmount, computed$, lastDeps, dependencies, context, mutation);\n\n  if ('error' in result) {\n    if (!shouldDistinctError(computed$, context)) {\n      computedState.error = result.error;\n      delete computedState.val;\n      computedState.epoch += 1;\n    }\n  } else if (!shouldDistinct(computed$, result.value, context)) {\n    computedState.val = result.value;\n    delete computedState.error;\n    computedState.epoch += 1;\n  }\n\n  return computedState;\n}\n","import type { Command, State, Computed, Signal, Updater, StateArg } from '../../../types/core/signal';\nimport type {\n  Mutation,\n  ReadComputed,\n  StoreContext,\n  StateState,\n  StoreGet,\n  StoreSet,\n  SetArgs,\n  ComputedState,\n} from '../../../types/core/store';\nimport { shouldDistinct } from '../signal/signal';\n\n// Dirty markers are just 'potentially' dirty because we don't know if\n// dependencies result will change. Pushing a computed to dirty markers doesn't\n// mean it will re-evaluate immediately, just marks it for epoch checking in\n// #tryGetCached. So the propagation is greedy to mark all dependants as dirty\nfunction pushDirtyMarkers(signalState: StateState<unknown>, context: StoreContext, mutation: Mutation) {\n  let queue: Computed<unknown>[] = Array.from(signalState.mounted?.readDepts ?? []);\n\n  while (queue.length > 0) {\n    const nextQueue: Computed<unknown>[] = [];\n    for (const computed$ of queue) {\n      mutation.potentialDirtyIds.add(computed$.id);\n\n      const computedState = context.stateMap.get(computed$);\n      // This computed$ is read from other computed$'s readDepts, so it must not be null and must have mounted\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      for (const dep of computedState!.mounted!.readDepts) {\n        nextQueue.push(dep);\n      }\n    }\n\n    queue = nextQueue;\n  }\n}\n\nfunction pullEvaluate(\n  readComputed: ReadComputed,\n  signalState: StateState<unknown>,\n  context: StoreContext,\n  mutation: Mutation,\n) {\n  let queue: Computed<unknown>[] = Array.from(signalState.mounted?.readDepts ?? []);\n\n  const oldValues = new Map<Computed<unknown>, unknown>();\n  const oldErrors = new Map<Computed<unknown>, unknown>();\n  while (queue.length > 0) {\n    const nextQueue: Computed<unknown>[] = [];\n    for (const computed$ of queue) {\n      const oldState = context.stateMap.get(computed$) as ComputedState<unknown> | undefined;\n      oldValues.set(computed$, oldState?.val);\n      oldErrors.set(computed$, oldState?.error);\n\n      const readDepts = context.stateMap.get(computed$)?.mounted?.readDepts;\n      if (readDepts) {\n        for (const dep of Array.from(readDepts)) {\n          nextQueue.push(dep);\n        }\n      }\n    }\n    queue = nextQueue;\n  }\n\n  queue = Array.from(signalState.mounted?.readDepts ?? []);\n\n  while (queue.length > 0) {\n    const nextQueue: Computed<unknown>[] = [];\n    for (const computed$ of queue) {\n      const computedState = readComputed(computed$, context, mutation);\n\n      const isSameWithOldValue =\n        !computedState.error && oldValues.has(computed$) && oldValues.get(computed$) === computedState.val;\n      const isSameError = computedState.error && Boolean(oldErrors.get(computed$));\n\n      if (isSameWithOldValue || isSameError) {\n        continue;\n      }\n\n      const readDepts = computedState.mounted?.readDepts;\n      if (readDepts) {\n        for (const dep of Array.from(readDepts)) {\n          nextQueue.push(dep);\n        }\n      }\n    }\n\n    queue = nextQueue;\n  }\n}\n\nfunction propagationChanges(\n  readComputed: ReadComputed,\n  signalState: StateState<unknown>,\n  context: StoreContext,\n  mutation: Mutation,\n) {\n  pushDirtyMarkers(signalState, context, mutation);\n  pullEvaluate(readComputed, signalState, context, mutation);\n}\n\nfunction innerSetState<T>(\n  readComputed: ReadComputed,\n  signal$: State<T>,\n  context: StoreContext,\n  mutation: Mutation,\n  val: StateArg<T>,\n) {\n  let newValue: T;\n  if (typeof val === 'function') {\n    const updater = val as Updater<T>;\n    newValue = updater((context.stateMap.get(signal$)?.val as T | undefined) ?? signal$.init);\n  } else {\n    newValue = val;\n  }\n\n  if (shouldDistinct(signal$, newValue, context)) {\n    return;\n  }\n\n  const signalState = context.stateMap.get(signal$);\n  if (!signalState) {\n    context.stateMap.set(signal$, {\n      val: newValue,\n      epoch: 0,\n    });\n    return;\n  }\n\n  signalState.val = newValue;\n  signalState.epoch += 1;\n  propagationChanges(readComputed, signalState, context, mutation);\n\n  return undefined;\n}\n\nexport function set<T, Args extends SetArgs<T, unknown[]>>(\n  readComputed: ReadComputed,\n  writable$: State<T> | Command<T, Args>,\n  context: StoreContext,\n  mutation: Mutation,\n  ...args: Args\n): undefined | T {\n  if ('read' in writable$) {\n    return;\n  }\n\n  if ('write' in writable$) {\n    return writable$.write(mutation.visitor, ...args);\n  }\n\n  innerSetState(readComputed, writable$, context, mutation, args[0]);\n  return;\n}\n\n/**\n * Creates a mutation operation context. The Mutation remains unique throughout\n * the mutation cycle and can track side effects produced by this mutation operation\n *\n * This tracking is implemented by coloring the visitor function, so the Mutation\n * needs to wrap get & set functions and ensure that all get & set operations\n * executed in the mutation context come from the same Mutation\n *\n * @param context\n * @param get\n * @param set\n * @returns\n */\nexport function createMutation(context: StoreContext, get: StoreGet, set: StoreSet): Mutation {\n  const mutation: Mutation = {\n    potentialDirtyIds: new Set(),\n    visitor: {\n      get: <T>(signal$: Signal<T>) => {\n        return get(signal$, context, mutation);\n      },\n      set: <T, Args extends SetArgs<T, unknown[]>>(\n        signal$: State<T> | Command<T, Args>,\n        ...args: Args\n      ): undefined | T => {\n        return set<T, Args>(signal$, context, ...args);\n      },\n    },\n  };\n\n  return mutation;\n}\n","import type { State } from '../../../types/core/signal';\nimport type { StateState, StoreContext } from '../../../types/core/store';\n\nexport function readState<T>(state: State<T>, context: StoreContext): StateState<T> {\n  const atomState = context.stateMap.get(state);\n  if (!atomState) {\n    const initState = {\n      val: state.init,\n      epoch: 0,\n    };\n    context.stateMap.set(state, initState);\n    return initState as StateState<T>;\n  }\n\n  return atomState as StateState<T>;\n}\n","import type { Computed, Signal } from '../../../types/core/signal';\nimport type {\n  ComputedState,\n  Mounted,\n  Mutation,\n  ReadSignal,\n  SignalState,\n  StoreContext,\n} from '../../../types/core/store';\nimport { isComputedState } from '../typing-util';\n\nfunction unmountComputedDependencies<T>(\n  computed$: Computed<T>,\n  computedState: ComputedState<T>,\n  context: StoreContext,\n  mutation?: Mutation,\n) {\n  for (const [dep] of Array.from(computedState.dependencies)) {\n    context.stateMap.get(dep)?.mounted?.readDepts.delete(computed$ as Computed<unknown>);\n    unmount(dep, context, mutation);\n  }\n}\n\nfunction mountComputedDependencies<T>(\n  readSignal: ReadSignal,\n  computed$: Computed<T>,\n  computedState: ComputedState<T>,\n  context: StoreContext,\n  mutation?: Mutation,\n) {\n  for (const [dep] of Array.from(computedState.dependencies)) {\n    const mounted = mount(readSignal, dep, context, mutation);\n    mounted.readDepts.add(computed$ as Computed<unknown>);\n  }\n}\n\nfunction initMount<T>(readSignal: ReadSignal, signal$: Signal<T>, context: StoreContext, mutation?: Mutation): Mounted {\n  context.interceptor?.mount?.(signal$);\n\n  const signalState = readSignal(signal$, context, mutation);\n\n  signalState.mounted = {\n    readDepts: new Set(),\n  };\n\n  if (isComputedState(signalState)) {\n    mountComputedDependencies(readSignal, signal$ as Computed<unknown>, signalState, context, mutation);\n  }\n\n  return signalState.mounted;\n}\n\nexport function mount<T>(\n  readSignal: ReadSignal,\n  signal$: Signal<T>,\n  context: StoreContext,\n  mutation?: Mutation,\n): Mounted {\n  const mounted = context.stateMap.get(signal$)?.mounted;\n  if (mounted) {\n    return mounted;\n  }\n\n  return initMount(readSignal, signal$, context, mutation);\n}\n\nfunction doUnmount<T>(\n  signal$: Signal<T>,\n  signalState: SignalState<T>,\n  context: StoreContext,\n  mutation?: Mutation,\n): void {\n  context.interceptor?.unmount?.(signal$);\n\n  if (isComputedState(signalState)) {\n    unmountComputedDependencies(signal$ as Computed<unknown>, signalState, context, mutation);\n  }\n\n  signalState.mounted = undefined;\n}\n\nexport function unmount<T>(signal$: Signal<T>, context: StoreContext, mutation?: Mutation): void {\n  const signalState = context.stateMap.get(signal$);\n  if (!signalState?.mounted || signalState.mounted.readDepts.size) {\n    return;\n  }\n\n  doUnmount(signal$, signalState, context, mutation);\n}\n","import type { Computed, Command, Read, State, Write } from '../../../types/core/signal';\n\ninterface Options {\n  debugLabel?: string;\n}\n\nlet globalId = 0;\n\nconst generateToString = (id: number, prefix: string, debugLabel?: string) => {\n  const label = `${prefix}${String(id)}${debugLabel ? ':' + debugLabel : ''}`;\n  return () => label;\n};\n\nexport function state<T>(init: T, options?: Options): State<T> {\n  const id = globalId++;\n  const ret: State<T> = {\n    id,\n    init,\n    toString: generateToString(id, 'S', options?.debugLabel),\n  };\n\n  if (options?.debugLabel) {\n    ret.debugLabel = options.debugLabel;\n  }\n  return ret;\n}\n\nexport function computed<T>(read: Read<T>, options?: Options): Computed<T> {\n  const id = globalId++;\n  const ret: Computed<T> = {\n    id,\n    read,\n    toString: generateToString(id, 'CPT', options?.debugLabel),\n  };\n\n  if (options?.debugLabel) {\n    ret.debugLabel = options.debugLabel;\n  }\n  return ret;\n}\n\nexport function command<T, Args extends unknown[]>(write: Write<T, Args>, options?: Options): Command<T, Args> {\n  const id = globalId++;\n  const ret: Command<T, Args> = {\n    id,\n    write,\n    toString: generateToString(id, 'CMD', options?.debugLabel),\n  };\n  if (options?.debugLabel) {\n    ret.debugLabel = options.debugLabel;\n  }\n  return ret;\n}\n","import type { Command, Getter, Setter, Signal, State, Computed, Watch } from '../../../types/core/signal';\nimport type {\n  StateMap,\n  Store,\n  StoreContext,\n  StoreOptions,\n  ComputedState,\n  Mounted,\n  Mutation,\n  ReadComputed,\n  SignalState,\n  StoreGet,\n  StoreSet,\n  SetArgs,\n  Watcher,\n  StoreWatch,\n  WatchOptions,\n} from '../../../types/core/store';\nimport { evaluateComputed, tryGetCached } from '../signal/computed';\nimport { withComputedInterceptor, withGetInterceptor, withSetInterceptor } from '../interceptor';\nimport { createMutation, set as innerSet } from './set';\nimport { readState } from '../signal/state';\nimport { canReadAsCompute } from '../typing-util';\nimport { mount as innerMount, unmount } from './sub';\nimport { computed } from '../signal/factory';\n\nconst readComputed: ReadComputed = <T>(\n  computed$: Computed<T>,\n  context: StoreContext,\n  mutation?: Mutation,\n): ComputedState<T> => {\n  const cachedState = tryGetCached(readComputed, computed$, context, mutation);\n  if (cachedState) {\n    return cachedState;\n  }\n\n  return withComputedInterceptor(\n    () => {\n      return evaluateComputed(readSignal, mount, unmount, computed$, context, mutation);\n    },\n    computed$,\n    context.interceptor?.computed,\n  );\n};\n\nfunction readSignal<T>(signal$: Signal<T>, context: StoreContext, mutation?: Mutation): SignalState<T> {\n  if (canReadAsCompute(signal$)) {\n    return readComputed(signal$, context, mutation);\n  }\n\n  return readState(signal$, context);\n}\n\nfunction mount<T>(signal$: Signal<T>, context: StoreContext, mutation?: Mutation): Mounted {\n  return innerMount(readSignal, signal$, context, mutation);\n}\n\nconst storeGet: StoreGet = (signal, context, mutation) => {\n  return withGetInterceptor(\n    () => {\n      const signalState = readSignal(signal, context, mutation);\n      if ('error' in signalState) {\n        throw signalState.error as Error;\n      }\n\n      return signalState.val;\n    },\n    signal,\n    context.interceptor?.get,\n  );\n};\n\nconst storeSet: StoreSet = <T, Args extends SetArgs<T, unknown[]>>(\n  atom: State<T> | Command<T, Args>,\n  context: StoreContext,\n  ...args: Args\n): T | undefined => {\n  return withSetInterceptor<T, Args>(\n    () => {\n      const mutation = createMutation(context, storeGet, storeSet);\n\n      return innerSet<T, Args>(readComputed, atom, context, mutation, ...args);\n    },\n    atom,\n    context.interceptor?.set,\n    ...args,\n  );\n};\n\nconst storeWatch: StoreWatch = (watchFn: Watch, context: StoreContext, options?: WatchOptions) => {\n  const computed$ = computed(\n    (get, { signal }) => {\n      let childSignal: AbortSignal | undefined;\n      const obOptions = {\n        get signal() {\n          if (!childSignal) {\n            childSignal = options?.signal ? AbortSignal.any([options.signal, signal]) : signal;\n          }\n          return childSignal;\n        },\n      };\n\n      watchFn(get, obOptions);\n    },\n    {\n      debugLabel: options?.debugLabel,\n    },\n  );\n\n  innerMount(readSignal, computed$, context);\n\n  options?.signal?.addEventListener(\n    'abort',\n    () => {\n      unmount(computed$, context);\n    },\n    {\n      once: true,\n    },\n  );\n};\n\nexport class StoreImpl implements Store {\n  protected readonly stateMap: StateMap = new WeakMap();\n  protected readonly context: StoreContext;\n\n  constructor(protected readonly options?: StoreOptions) {\n    this.context = {\n      stateMap: this.stateMap,\n      interceptor: this.options?.interceptor,\n    };\n  }\n\n  get: Getter = <T>(atom: Signal<T>): T => {\n    return storeGet(atom, this.context);\n  };\n\n  set: Setter = <T, Args extends SetArgs<T, unknown[]>>(\n    atom: State<T> | Command<T, Args>,\n    ...args: Args\n  ): undefined | T => {\n    return storeSet<T, Args>(atom, this.context, ...args);\n  };\n\n  watch: Watcher = (watchFn: Watch, options?: WatchOptions) => {\n    storeWatch(watchFn, this.context, options);\n  };\n}\n\nexport function createStore(): Store {\n  return new StoreImpl();\n}\n","import type { ComputedState, SignalState, StoreInterceptor } from '../../types/core/store';\nimport type { DebugStore, Edge, NestedAtom } from '../../types/debug/debug-store';\nimport type { Computed, State } from '../core';\nimport { StoreImpl } from '../core/store/store';\nimport { canReadAsCompute } from '../core/typing-util';\n\nexport class DebugStoreImpl extends StoreImpl implements DebugStore {\n  getReadDependencies = (atom: State<unknown> | Computed<unknown>): NestedAtom => {\n    const atomState = this.context.stateMap.get(atom);\n    if (!atomState) {\n      return [atom];\n    }\n\n    if (!('dependencies' in atomState)) {\n      return [atom];\n    }\n\n    return [\n      atom,\n      ...Array.from(atomState.dependencies).map(([key]) => {\n        return this.getReadDependencies(key);\n      }),\n    ] as NestedAtom;\n  };\n\n  getReadDependents = (atom: State<unknown> | Computed<unknown>): NestedAtom => {\n    const atomState = this.context.stateMap.get(atom);\n    if (!atomState) {\n      return [atom];\n    }\n\n    return [\n      atom,\n      ...Array.from(atomState.mounted?.readDepts ?? []).map((key) => this.getReadDependents(key)),\n    ] as NestedAtom;\n  };\n\n  isMounted = (atom: State<unknown> | Computed<unknown>): boolean => {\n    const mountState = this.stateMap.get(atom);\n    return mountState?.mounted !== undefined;\n  };\n\n  getDependenciesGraph = (computed$: Computed<unknown>): Edge[] => {\n    const stateMap = this.context.stateMap;\n    function fillDependenciesGraph(computed$: Computed<unknown>, result: Edge[]) {\n      const computedState = stateMap.get(computed$) as ComputedState<unknown>;\n      for (const [child$, epoch] of computedState.dependencies.entries()) {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion, @typescript-eslint/no-non-null-assertion\n        const childState = stateMap.get(child$)! as SignalState<unknown>;\n        result.push([\n          {\n            signal: computed$,\n            val: computedState.val,\n            epoch: computedState.epoch,\n          },\n          {\n            signal: child$,\n            val: childState.val,\n            epoch: childState.epoch,\n          },\n          epoch,\n        ]);\n        if (canReadAsCompute(child$)) {\n          fillDependenciesGraph(child$, result);\n        }\n      }\n    }\n\n    const result: Edge[] = [];\n    fillDependenciesGraph(computed$, result);\n    return result;\n  };\n}\n\nexport function createDebugStoreInternal(interceptor?: StoreInterceptor): DebugStore {\n  return new DebugStoreImpl({\n    interceptor: interceptor,\n  });\n}\n","import type { SetArgs, StoreEventType, StoreInterceptor } from '../../types/core/store';\nimport type { DebugStore } from '../../types/debug/debug-store';\nimport type { Computed, Command, State } from '../core';\nimport { createDebugStoreInternal } from './debug-store';\n\nexport interface AtomWatch {\n  target: State<unknown> | Computed<unknown> | Command<unknown, unknown[]> | string | RegExp;\n  actions?: Set<StoreEventType>;\n}\n\nexport class ConsoleInterceptor implements StoreInterceptor {\n  constructor(private readonly watches: AtomWatch[]) {}\n\n  private shouldLog = (\n    atom: State<unknown> | Computed<unknown> | Command<unknown, unknown[]>,\n    action: StoreEventType,\n  ) => {\n    return this.watches.some((watch) => {\n      let atomMatched = false;\n      if (typeof watch.target === 'string') {\n        atomMatched = atom.toString().includes(watch.target);\n      } else if (watch.target instanceof RegExp) {\n        atomMatched = watch.target.test(atom.toString());\n      } else {\n        atomMatched = watch.target === atom;\n      }\n\n      if (!atomMatched) {\n        return false;\n      }\n\n      return !watch.actions || watch.actions.has(action);\n    });\n  };\n\n  get = <T>(atom$: State<T> | Computed<T>, fn: () => T) => {\n    if (!this.shouldLog(atom$, 'get')) {\n      fn();\n      return;\n    }\n\n    console.group('[R][GET] ' + atom$.toString());\n    console.log('ret:', fn());\n    console.groupEnd();\n  };\n\n  computed = <T>(atom$: Computed<T>, fn: () => T) => {\n    if (!this.shouldLog(atom$, 'computed')) {\n      fn();\n      return;\n    }\n\n    console.group('[R][CPT] ' + atom$.toString());\n    console.log('ret:', fn());\n    console.groupEnd();\n  };\n\n  set = <T, Args extends SetArgs<T, unknown[]>>(atom$: State<T> | Command<T, Args>, fn: () => T, ...args: Args) => {\n    if (!this.shouldLog(atom$ as unknown as State<T>, 'set')) {\n      fn();\n      return;\n    }\n\n    console.group('[R][SET] ' + atom$.toString(), '(', ...args, ')');\n    console.log('ret:', fn());\n    console.groupEnd();\n  };\n\n  mount = <T>(atom$: State<T> | Computed<T>) => {\n    if (!this.shouldLog(atom$, 'mount')) {\n      return;\n    }\n\n    console.log('[R][MNT] ' + atom$.toString());\n  };\n\n  unmount = <T>(atom$: State<T> | Computed<T>) => {\n    if (!this.shouldLog(atom$, 'unmount')) {\n      return;\n    }\n\n    console.log('[R][UNM] ' + atom$.toString());\n  };\n}\n\nexport function createDebugStore(\n  watches: (AtomWatch | string | RegExp | State<unknown> | Computed<unknown> | Command<unknown, unknown[]>)[] = [],\n  defaultActions?: StoreEventType[],\n): DebugStore {\n  const parsedDefaultActions = defaultActions ? new Set(defaultActions) : undefined;\n\n  const parsedWatches = watches.map((watch): AtomWatch => {\n    if (typeof watch === 'string' || watch instanceof RegExp) {\n      return { target: watch, actions: parsedDefaultActions };\n    }\n\n    if ('target' in watch) {\n      return watch;\n    }\n\n    return { target: watch, actions: parsedDefaultActions };\n  });\n\n  const interceptor = new ConsoleInterceptor(parsedWatches);\n  return createDebugStoreInternal(interceptor);\n}\n"],"names":["withSetInterceptor","fn","writable$","interceptor","result","called","wrappedFn","data","_len","arguments","length","args","Array","_key","apply","concat","Error","withGetInterceptor","signal","withComputedInterceptor","val","withGeValInterceptor","canReadAsCompute","atom","isComputedState","state","currentValue","context","_context$stateMap$get","stateMap","get","shouldDistinct","value","shouldDistinctError","_context$stateMap$get2","error","undefined","checkEpoch","readComputed","computedState","mutation","_iterator","_createForOfIteratorHelper","dependencies","entries","_step","s","n","done","_step$value","_slicedToArray","dep","epoch","depEpoch","err","e","f","tryGetCached","computed$","signalState","mayDirty","potentialDirtyIds","has","id","mounted","wrapGet","readSignal","mount","callerComputed$","callerState","readDeps","Map","dep$","depState","set","callerMounted","readDepts","add","getOrInitComputedState","cleanupMissingDependencies","unmount","lastDeps","currDeps","_iterator2","keys","_step2","key","_depState$mounted","evaluateComputed","_wrapGet","_wrapGet2","_get","read","depAtom","_context$interceptor","_computedState$abortC","_computed$$debugLabel","abortController","abort","debugLabel","AbortController","pushDirtyMarkers","_signalState$mounted$","_signalState$mounted","queue","from","nextQueue","push","pullEvaluate","_signalState$mounted$2","_signalState$mounted2","_signalState$mounted$3","_signalState$mounted3","oldValues","oldErrors","_iterator3","_step3","oldState","_i","_Array$from","_iterator4","_step4","_computedState$mounte","isSameWithOldValue","isSameError","Boolean","_i2","_Array$from2","propagationChanges","innerSetState","signal$","newValue","_ref","updater","init","write","visitor","createMutation","Set","_len2","_key2","readState","atomState","initState","unmountComputedDependencies","_Array$from$_i","mountComputedDependencies","_Array$from2$_i","initMount","_context$interceptor$","call","doUnmount","_context$interceptor2","_context$interceptor3","size","globalId","generateToString","prefix","label","String","computed","options","ret","toString","cachedState","innerMount","storeGet","storeSet","innerSet","storeWatch","watchFn","_options$signal","childSignal","obOptions","AbortSignal","any","addEventListener","once","StoreImpl","_createClass","_this","_this$options","_classCallCheck","_defineProperty","WeakMap","DebugStoreImpl","_StoreImpl","_callSuper","_toConsumableArray","map","_ref2","getReadDependencies","_atomState$mounted$re","_atomState$mounted","getReadDependents","mountState","fillDependenciesGraph","child$","childState","_inherits","createDebugStoreInternal","ConsoleInterceptor","watches","action","some","watch","atomMatched","target","includes","RegExp","test","actions","atom$","shouldLog","console","group","log","groupEnd","_console","createDebugStore","defaultActions","parsedDefaultActions","parsedWatches"],"mappings":"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"}